<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Spring Framework &amp; Spring Boot 规划</title>
      <link href="/2022/03/06/spring-gui-hua/"/>
      <url>/2022/03/06/spring-gui-hua/</url>
      
        <content type="html"><![CDATA[<p>Spring Framework 5.3.x</p><p>先来看看Spring Framework 5.3.x的一些规划。</p><p><img src="/image/spring-gui-hui-1.jpeg" class="lazyload placeholder" data-srcset="/image/spring-gui-hui-1.jpeg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>不用翻译的了吧，<strong>强调一下Spring Boot 2.6和2.7都会基于该版本</strong>。</p><p>Spring Framework 6.0 GA</p><p>备受瞩目的就是Spring Framework 6.0了。它将基于 Java 17 和 Jakarta EE 9 。</p><p>Spring Framework 6.0的路线图</p><p>Spring 官方同时公布了Spring 6.0的发布路线图。你可以看到Spring 6具体的发布时间线。</p><p><img src="/image/spring-gui-hui-1.png" class="lazyload placeholder" data-srcset="/image/spring-gui-hui-1.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg">)</p><p>Spring Boot 3.0</p><p><strong>可以肯定的是Spring Boot 3基于Spring Framework 6</strong>，并且Spring Boot 3将彻底开启云原生之路。</p><p>可以预测的是Spring Boot 3的正式发布时间会在2022年的第四季度末。</p>]]></content>
      
      
      <categories>
          
          <category> Spring Framework </category>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Framework </tag>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>asdg-asdg</title>
      <link href="/2022/03/03/asdg-asdg/"/>
      <url>/2022/03/03/asdg-asdg/</url>
      
        <content type="html"><![CDATA[<p><img src="/asdg-asdg/asdg.PNG" class="lazyload placeholder" data-srcset="/asdg-asdg/asdg.PNG" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>test</title>
      <link href="/2022/03/03/test/"/>
      <url>/2022/03/03/test/</url>
      
        <content type="html"><![CDATA[<div class="timeline"><div class="timenode"><div class="meta"><p><p>2021-01-01 <a href="https://github.com/yuang01/hexo-theme-bamboo">1.0.3 -&gt; 1.0.3</a></p></p></div><div class="body"><ol><li>我是一个测试文字<code>ghghgh</code>。</li><li>我是一个测试问题二’qweqw’，请问企鹅请问请问佛挡杀<code>fgfgf</code>佛第三节课。</li><li>我是一个测试问题三’fgfgfg’，请问企鹅请问请问佛挡杀<code>trtrtr</code>佛第三节课。</li></ol></div></div><div class="timenode"><div class="meta"><p><p>2020-08-15 <a href="https://github.com/yuang01/hexo-theme-bamboo">1.0.2 -&gt; 1.0.2</a></p></p></div><div class="body"><p>这是一段测试文字</p></div></div><div class="timenode"><div class="meta"><p><p>2020-08-08 <a href="https://github.com/yuang01/hexo-theme-bamboo">1.0.0 -&gt; 1.0.0</a></p></p></div><div class="body"><ol><li>我是一个测试文字<code>ghghgh</code>。</li><li>我是一个测试问题二’qweqw’，请问企鹅请问请问佛挡杀<code>fgfgf</code>佛第三节课。</li><li>我是一个测试问题三’fgfgfg’，请问企鹅请问请问佛挡杀<code>trtrtr</code>佛第三节课。</li></ol></div></div></div><h3 id="上述示例代码"><a href="#上述示例代码" class="headerlink" title="上述示例代码"></a>上述示例代码</h3><p>复制</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">&#123;</span>% timeline %<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>% timenode <span class="token number">2021</span>-01-01 <span class="token punctuation">[</span><span class="token number">1.0</span>.3 -<span class="token operator">></span> <span class="token number">1.0</span>.3<span class="token punctuation">]</span><span class="token punctuation">(</span>https://github.com/yuang01/hexo-theme-bamboo<span class="token punctuation">)</span> %<span class="token punctuation">&#125;</span><span class="token number">1</span>. 我是一个测试文字<span class="token variable"><span class="token variable">`</span>ghghgh<span class="token variable">`</span></span>。<span class="token number">2</span>. 我是一个测试问题二<span class="token string">'qweqw'</span>，请问企鹅请问请问佛挡杀<span class="token variable"><span class="token variable">`</span>fgfgf<span class="token variable">`</span></span>佛第三节课。<span class="token number">2</span>. 我是一个测试问题三<span class="token string">'fgfgfg'</span>，请问企鹅请问请问佛挡杀<span class="token variable"><span class="token variable">`</span>trtrtr<span class="token variable">`</span></span>佛第三节课。<span class="token punctuation">&#123;</span>% endtimenode %<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>% timenode <span class="token number">2020</span>-08-15 <span class="token punctuation">[</span><span class="token number">1.0</span>.2 -<span class="token operator">></span> <span class="token number">1.0</span>.2<span class="token punctuation">]</span><span class="token punctuation">(</span>https://github.com/yuang01/hexo-theme-bamboo<span class="token punctuation">)</span> %<span class="token punctuation">&#125;</span>这是一段测试文字<span class="token punctuation">&#123;</span>% endtimenode %<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>% timenode <span class="token number">2020</span>-08-08 <span class="token punctuation">[</span><span class="token number">1.0</span>.0 -<span class="token operator">></span> <span class="token number">1.0</span>.0<span class="token punctuation">]</span><span class="token punctuation">(</span>https://github.com/yuang01/hexo-theme-bamboo<span class="token punctuation">)</span> %<span class="token punctuation">&#125;</span><span class="token number">1</span>. 我是一个测试文字<span class="token variable"><span class="token variable">`</span>ghghgh<span class="token variable">`</span></span>。<span class="token number">2</span>. 我是一个测试问题二<span class="token string">'qweqw'</span>，请问企鹅请问请问佛挡杀<span class="token variable"><span class="token variable">`</span>fgfgf<span class="token variable">`</span></span>佛第三节课。<span class="token number">2</span>. 我是一个测试问题三<span class="token string">'fgfgfg'</span>，请问企鹅请问请问佛挡杀<span class="token variable"><span class="token variable">`</span>trtrtr<span class="token variable">`</span></span>佛第三节课。<span class="token punctuation">&#123;</span>% endtimenode %<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>% endtimeline %<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 class="bamboo-h " id="video演示">video演示</h2><br/><p>100%宽度</p><div class="video"><video controls preload><source src='https://assets.mixkit.co/videos/preview/mixkit-down-the-river-in-a-bamboo-canoe-6804-large.mp4' type='video/mp4'>Your browser does not support the video tag.</video></div>50%宽度<div class="videos" col='2'><div class="video"><video controls preload><source src='https://assets.mixkit.co/videos/preview/mixkit-down-the-river-in-a-bamboo-canoe-6804-large.mp4' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://assets.mixkit.co/videos/preview/mixkit-down-the-river-in-a-bamboo-canoe-6804-large.mp4' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://assets.mixkit.co/videos/preview/mixkit-down-the-river-in-a-bamboo-canoe-6804-large.mp4' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://assets.mixkit.co/videos/preview/mixkit-down-the-river-in-a-bamboo-canoe-6804-large.mp4' type='video/mp4'>Your browser does not support the video tag.</video></div></div><h3 id="上述事例代码"><a href="#上述事例代码" class="headerlink" title="上述事例代码"></a>上述事例代码</h3><p>复制</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">&#123;</span>% title h2, video演示 %<span class="token punctuation">&#125;</span><span class="token number">100</span>%宽度<span class="token punctuation">&#123;</span>% video  https://assets.mixkit.co/videos/preview/mixkit-down-the-river-in-a-bamboo-canoe-6804-large.mp4 %<span class="token punctuation">&#125;</span><span class="token number">50</span>%宽度<span class="token punctuation">&#123;</span>% videos, <span class="token number">2</span> %<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>% video  https://assets.mixkit.co/videos/preview/mixkit-down-the-river-in-a-bamboo-canoe-6804-large.mp4 %<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>% video  https://assets.mixkit.co/videos/preview/mixkit-down-the-river-in-a-bamboo-canoe-6804-large.mp4 %<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>% video  https://assets.mixkit.co/videos/preview/mixkit-down-the-river-in-a-bamboo-canoe-6804-large.mp4 %<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>% video  https://assets.mixkit.co/videos/preview/mixkit-down-the-river-in-a-bamboo-canoe-6804-large.mp4 %<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>% endvideos %<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>键盘样式的文本 <kbd>command</kbd> + <kbd>D</kbd><br>密码样式的文本：<psw>这里没有验证码</psw></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>spring-framework源码之旅-源码阅读环境搭建</title>
      <link href="/2022/01/01/spring-framework-resource-parse-0/"/>
      <url>/2022/01/01/spring-framework-resource-parse-0/</url>
      
        <content type="html"><![CDATA[<p>spring-framework源码之旅-源码阅读环境搭建</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​        想着也大概有一年多没看过Spring源码了，阅读Spring源码的好处我就不在此啰嗦了，我就借此机会写一篇构建Spring源码的过程，希望能让后面的朋友少走弯路，少踩坑。</p><p>  开始之前，先说一下我的电脑是新的，也就是所有开发工具和环境都是最新下载和配置的，另外我是科学上网的，没使用梯子走捷径，也就是说本文的源码构建速度是在正常使用网络情况下，我自己达到的最佳速度，不代表任何人。本文使用到的开发工具及版本说明如下：</p><ul><li><font color='cornflowerblue'>IntelliJ IDEA 2020 以上(包含2020)</font></li><li><font color='red'>gradle-6.7</font></li><li><font color='green'>spring-framework较新版（spring-framework-5.3.1）</font></li><li><font color='red'>jdk 11</font></li></ul><table><thead><tr><th>spring-framework-版本</th><th>jdk版本</th></tr></thead><tbody><tr><td><strong>5.0.0 - 5.3.0</strong></td><td><strong>必须使用JDK 8</strong></td></tr><tr><td><strong>5.3.1 - 5.3.9</strong></td><td><strong>必须使用JDK 11</strong></td></tr><tr><td><strong>5.3.10 - 最新</strong></td><td><strong>必须使用JDK 17</strong></td></tr></tbody></table><p>现在，让我们正式开始Spring源码的构建之旅。</p><hr><h2 id="下载配置Gradle"><a href="#下载配置Gradle" class="headerlink" title="下载配置Gradle"></a>下载配置Gradle</h2><p>  这个不是本文的重点又比较简单，你得靠自己先去配置好，不会的可以站内搜索 <code>gradle配置</code></p><hr><h2 id="下载Spring源码"><a href="#下载Spring源码" class="headerlink" title="下载Spring源码"></a>下载Spring源码</h2><p>1、在github上下载Spring新版源码，如下图所示：</p><p>源码地址 <a href="https://github.com/spring-projects/spring-framework/tree/v5.3.1">GitHub - spring-projects&#x2F;spring-framework at v5.3.1</a></p><blockquote><p><strong>如果下载比较慢，请尝试使用手机网络，或者翻墙</strong></p></blockquote><p>2、下载完成以后解压到你自己本地文件夹。</p><hr><p><img src="/image/image-20220306115314831.png" class="lazyload placeholder" data-srcset="/image/image-20220306115314831.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220306115314831"></p><h2 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h2><p>重点来了，下载好源码以后，我们要开始源码构建了，在构建之前，我们先打开<code>spring-framework-5.3.7</code>，看我截图的四个文件。下面来一一说明。</p><p><img src="/image/image-20220306115550620.png" class="lazyload placeholder" data-srcset="/image/image-20220306115550620.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220306115550620"></p><p>1、<code>import-into-idea.md</code>：这是官方提供的spring源码导入idea的步骤和注意说明，我已经翻译过了，可以移步：IDEA导入Spring源码调试必看</p><p>2、修改<code>settings.gradle</code>文件，下载依赖的网络速度之不可描述原因，懂得人都懂，我们加上阿里云的maven仓库。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">maven <span class="token punctuation">&#123;</span> url <span class="token string">"https://maven.aliyun.com/repository/public"</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改好之后如下图所示：  <font color='cornflowerblue'>这里我使用的是notepad++ 编辑的</font></p><p><img src="/image/image-20220306120044573.png" class="lazyload placeholder" data-srcset="/image/image-20220306120044573.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220306120044573"></p><blockquote><p><strong>id “io.spring.gradle-enterprise-conventions” version “0.0.2”</strong>  该插件无法下载请注释</p><p><img src="/image/image-20220306115948793.png" class="lazyload placeholder" data-srcset="/image/image-20220306115948793.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220306115948793"></p></blockquote><p>3、修改<code>gradle.properties</code>文件，我都加了详细注释</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">version</span><span class="token operator">=</span><span class="token number">5.3</span>.1<span class="token comment">## 设置此参数主要是编译下载包会占用大量的内存，可能会内存溢出</span>org.gradle.jvmargs<span class="token operator">=</span>-Xmx2048M<span class="token comment">## 开启 Gradle 缓存</span>org.gradle.caching<span class="token operator">=</span>true<span class="token comment">## 开启并行编译</span>org.gradle.parallel<span class="token operator">=</span>true<span class="token comment">## 启用新的孵化模式</span>org.gradle.configureondemand<span class="token operator">=</span>true<span class="token comment">## 开启守护进程 通过开启守护进程，下一次构建的时候，将会连接这个守护进程进行构建，而不是重新fork一个gradle构建进程</span>org.gradle.daemon<span class="token operator">=</span>true<span class="token comment">## kotlin依赖</span>kotlin.stdlib.default.dependency<span class="token operator">=</span>false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改好之后如下图所示：</p><p><img src="/image/image-20220306120224037.png" class="lazyload placeholder" data-srcset="/image/image-20220306120224037.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220306120224037"></p><p>4、修改<code>build.gradle</code>文件，加上使用阿里云仓库，提高下载速度。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">maven <span class="token punctuation">&#123;</span> url <span class="token string">'https://maven.aliyun.com/nexus/content/groups/public/'</span> <span class="token punctuation">&#125;</span>maven <span class="token punctuation">&#123;</span> url <span class="token string">'https://maven.aliyun.com/nexus/content/repositories/jcenter'</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>修改好之后如下图所示：</p><p><img src="/image/image-20220306120805334.png" class="lazyload placeholder" data-srcset="/image/image-20220306120805334.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220306120805334"></p><hr><h2 id="准备构建"><a href="#准备构建" class="headerlink" title="准备构建"></a>准备构建</h2><p>1、再次为了证明我是从零开始的，我把gradle的仓库依赖截图给大家看，我自定义的gradle的本地仓库依赖位置是</p><p><code>C:\Users\23142\Documents\gradlerepository</code> </p><p><img src="/image/image-20220306120320138.png" class="lazyload placeholder" data-srcset="/image/image-20220306120320138.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220306120320138"></p><p>默认是 <code>C:\Users\用户账号\.gradle</code></p><p><font color='red'><strong>我的仓库现在是空的，没有任何下载好的依赖</strong></font></p><p>2.先执行<img src="/image/image-20220306120521406.png" class="lazyload placeholder" data-srcset="/image/image-20220306120521406.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220306120521406"> 安装配置好gradle后 双击即可</p><p><img src="/image/image-20220306122030404.png" class="lazyload placeholder" data-srcset="/image/image-20220306122030404.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220306122030404"></p><p>3、预编译<code>spring-oxm</code>，根据<code>import-into-idea.md</code>要求，我们需要先预编译<code>spring-oxm</code>和<code>spring-core</code>，使用命令<code>./gradlew :spring-oxm:compileTestJava</code>，</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./gradlew :spring-oxm:compileTestJava<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可能会编译失败  请使用 JDK 11</p><p><img src="/image/image-20220306125423287.png" class="lazyload placeholder" data-srcset="/image/image-20220306125423287.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220306125423287"></p><p>以上内容信息提示预编译spring-core，使用命令<code>./gradlew :spring-core:compileTestJava</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">.</span>/gradlew <span class="token operator">:</span>spring<span class="token operator">-</span>core<span class="token operator">:</span>compileTestJava<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/image/image-20220306133443936.png" class="lazyload placeholder" data-srcset="/image/image-20220306133443936.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220306133443936"></p><h2 id="IDEA导入Spring源码"><a href="#IDEA导入Spring源码" class="headerlink" title="IDEA导入Spring源码"></a>IDEA导入Spring源码</h2><p>使用idea打开 可以发现IDEA会自动开始构建编译spring源码-加载依赖并测试</p><p>一般正常 10min 左右 即可完成Spring源码的构建编译工作</p><p><img src="/image/image-20220306155722510.png" class="lazyload placeholder" data-srcset="/image/image-20220306155722510.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220306155722510"></p><p>到这儿，使用IDEA+Gradle构建Spring5源码就已经全部完成。</p><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>实践是检验真理的唯一标准，那么怎样验证我们上面的构建是否成功呢，很简单，写个demo测试一下就好了，下面进入验证过程。</p><p>1、在spring-framework-5.3.1项目下新建我们自己的测试module，</p><p><img src="/image/image-20220306160243643.png" class="lazyload placeholder" data-srcset="/image/image-20220306160243643.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220306160243643"></p><p>2、选择使用gradle</p><p><img src="/image/image-20220306160324088.png" class="lazyload placeholder" data-srcset="/image/image-20220306160324088.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220306160324088"></p><p>3、输入自己的module名</p><p><img src="/image/image-20220306160758143.png" class="lazyload placeholder" data-srcset="/image/image-20220306160758143.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220306160758143"></p><p>4、既然要验证，那我们肯定需要依赖spring的模块，我们在我们刚刚新建的模块下build.gradle文件中引入依赖spring-context模块。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">implementation<span class="token punctuation">(</span>project<span class="token punctuation">(</span><span class="token string">":spring-context"</span><span class="token punctuation">))</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/image/image-20220306161005478.png" class="lazyload placeholder" data-srcset="/image/image-20220306161005478.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220306161005478"></p><p>5、刷新依赖，重新编译，速度同样飞快。</p><p><img src="/image/image-20220306162917952.png" class="lazyload placeholder" data-srcset="/image/image-20220306162917952.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220306162917952"></p><p>6、我们先写一个实体类 <code>User.class</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">String</span> userName<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">String</span> userJob<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> userName<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUserName</span><span class="token punctuation">(</span><span class="token class-name">String</span> userName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>userName <span class="token operator">=</span> userName<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getUserJob</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> userJob<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUserJob</span><span class="token punctuation">(</span><span class="token class-name">String</span> userJob<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>userJob <span class="token operator">=</span> userJob<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token class-name">String</span> userName<span class="token punctuation">,</span> <span class="token class-name">String</span> userJob<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>userName <span class="token operator">=</span> userName<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>userJob <span class="token operator">=</span> userJob<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token string">"User&#123;"</span> <span class="token operator">+</span><span class="token string">"userName='"</span> <span class="token operator">+</span> userName <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span><span class="token string">", userJob='"</span> <span class="token operator">+</span> userJob <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span><span class="token char">'&#125;'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>7、基于 XML 的配置元数据</p><p>创建 <code>ac-test.xml</code> 文件</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!--   &lt;bean id="..." class="...">--></span>      <span class="token comment">&lt;!-- collaborators and configuration for this bean go here --></span><span class="token comment">&lt;!--   &lt;/bean>--></span>   <span class="token comment">&lt;!-- more bean definitions go here --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ac<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token comment">&lt;!-- collaborators and configuration for this bean go here --></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ctrl-阿超<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userJob<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>programmer-程序员<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>8、创建测试类<code>TestMain.class</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ApplicationContext</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestMain</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"ac-test.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">User</span> ac <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"ac"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ac<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>9、运行，如下图所示：</p><p><img src="/image/image-20220306163436762.png" class="lazyload placeholder" data-srcset="/image/image-20220306163436762.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20220306163436762"></p>]]></content>
      
      
      <categories>
          
          <category> spring-framework源码之旅 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring-framework源码之旅 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora 设置字体颜色</title>
      <link href="/2019/03/30/typora-setting-typeface-color/"/>
      <url>/2019/03/30/typora-setting-typeface-color/</url>
      
        <content type="html"><![CDATA[<h1 id="Typora-设置字体颜色"><a href="#Typora-设置字体颜色" class="headerlink" title="Typora 设置字体颜色"></a>Typora 设置字体颜色</h1><p><strong>Typora</strong> 没有直接设置字体颜色的功能，不能像word一样，选中字体直接设置想要的颜色。</p><p><font color='red'>Typora</font>工具中设置字体颜色的方案。</p><p>下面需安装软件<font color='orange'>AutoHotKey</font>，操作起来比较简单，建议新手使用；</p><h2 id="1、AutoHotKey（较简单）"><a href="#1、AutoHotKey（较简单）" class="headerlink" title="1、AutoHotKey（较简单）"></a>1、AutoHotKey（较简单）</h2><p><font color='orange'>AutoHotKey</font>是一款著名的<font color='cornflowerblue'>windows</font>系统快捷键设置的软件，轻便小巧。</p><p>官方下载地址： <a href="https://autohotkey.com/download/ahk-install.exe">https://autohotkey.com/download/ahk-install.exe</a></p><p>使用步骤如下：</p><h3 id="先安装AutoHotKey"><a href="#先安装AutoHotKey" class="headerlink" title="先安装AutoHotKey"></a>先安装AutoHotKey</h3><h3 id="打开记事本，把下面的内容复制粘贴进去："><a href="#打开记事本，把下面的内容复制粘贴进去：" class="headerlink" title="打开记事本，把下面的内容复制粘贴进去："></a>打开记事本，把下面的内容复制粘贴进去：</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">;</span> Typora<span class="token punctuation">;</span> 快捷增加字体颜色<span class="token punctuation">;</span> SendInput <span class="token punctuation">&#123;</span>Text<span class="token punctuation">&#125;</span> 解决中文输入法问题 <span class="token macro property"><span class="token directive-hash">#</span><span class="token expression">IfWinActive ahk_exe Typora<span class="token punctuation">.</span>exe</span></span><span class="token punctuation">&#123;</span>    <span class="token punctuation">;</span> Ctrl<span class="token operator">+</span>Alt<span class="token operator">+</span>R 红色    <span class="token operator">^</span><span class="token operator">!</span>r<span class="token operator">::</span><span class="token function">addFontColor</span><span class="token punctuation">(</span><span class="token string">"red"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> Ctrl<span class="token operator">+</span>Alt<span class="token operator">+</span>O 橙色    <span class="token operator">^</span><span class="token operator">!</span>o<span class="token operator">::</span><span class="token function">addFontColor</span><span class="token punctuation">(</span><span class="token string">"orange"</span><span class="token punctuation">)</span>     <span class="token punctuation">;</span> Ctrl<span class="token operator">+</span>Alt<span class="token operator">+</span>B 浅蓝色    <span class="token operator">^</span><span class="token operator">!</span>b<span class="token operator">::</span><span class="token function">addFontColor</span><span class="token punctuation">(</span><span class="token string">"cornflowerblue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> Ctrl<span class="token operator">+</span>Alt<span class="token operator">+</span>G 绿色<span class="token operator">^</span><span class="token operator">!</span>g<span class="token operator">::</span><span class="token function">addFontColor</span><span class="token punctuation">(</span><span class="token string">"green"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token punctuation">;</span> 快捷增加字体颜色<span class="token function">addFontColor</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    clipboard <span class="token operator">:</span><span class="token operator">=</span> <span class="token string">""</span> <span class="token punctuation">;</span> 清空剪切板    Send <span class="token punctuation">&#123;</span>ctrl down<span class="token punctuation">&#125;</span>c<span class="token punctuation">&#123;</span>ctrl up<span class="token punctuation">&#125;</span> <span class="token punctuation">;</span> 复制     SendInput <span class="token punctuation">&#123;</span>TEXT<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span>font color<span class="token operator">=</span><span class="token char">'%color%'</span><span class="token operator">></span>    SendInput <span class="token punctuation">&#123;</span>ctrl down<span class="token punctuation">&#125;</span>v<span class="token punctuation">&#123;</span>ctrl up<span class="token punctuation">&#125;</span> <span class="token punctuation">;</span> 粘贴    <span class="token function">If</span><span class="token punctuation">(</span>clipboard <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        SendInput <span class="token punctuation">&#123;</span>TEXT<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>font<span class="token operator">></span> <span class="token punctuation">;</span> Typora 在这不会自动补充    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        SendInput <span class="token punctuation">&#123;</span>TEXT<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span> <span class="token punctuation">;</span> Typora中自动补全标签    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="将文件保存为ahk后缀的文件，如AutoHotKey-ahk"><a href="#将文件保存为ahk后缀的文件，如AutoHotKey-ahk" class="headerlink" title="将文件保存为ahk后缀的文件，如AutoHotKey.ahk"></a>将文件保存为ahk后缀的文件，如<font color='cornflowerblue'>AutoHotKey.ahk</font></h3><h3 id="双击运行"><a href="#双击运行" class="headerlink" title="双击运行"></a>双击运行</h3><h3 id="在Typora软件里就可以使用快捷键进行想要的修改操作了（想要更多的快捷键设置方式，可以在AutoHotKey-ahk文件中自行添加）："><a href="#在Typora软件里就可以使用快捷键进行想要的修改操作了（想要更多的快捷键设置方式，可以在AutoHotKey-ahk文件中自行添加）：" class="headerlink" title="在Typora软件里就可以使用快捷键进行想要的修改操作了（想要更多的快捷键设置方式，可以在AutoHotKey.ahk文件中自行添加）："></a>在Typora软件里就可以使用快捷键进行想要的修改操作了（想要更多的快捷键设置方式，可以在AutoHotKey.ahk文件中自行添加）：</h3><p><font color='red'>如按 Ctrl+Alt+O 添加橙色， Ctrl+Alt+R 红色，按 Ctrl+\ 取消样式！</font></p><p>也可以右键 AutoHotKey.ahk 脚本文件，点击Compile Script编译脚本成exe程序，就可以不用下载Autohotkey在其他电脑上运行了。</p><p>提示：上面脚本只写了橙色、红色、浅蓝三种颜色，你可以按需照例增加其他颜色或快捷方式！</p>]]></content>
      
      
      <categories>
          
          <category> Typora </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/03/30/hello-world/"/>
      <url>/2019/03/30/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><p><img src="/image%5Chexo.png" class="lazyload placeholder" data-srcset="/image%5Chexo.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="img-hexo"></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
